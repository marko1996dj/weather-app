{"version":3,"sources":["Day/Day.module.scss","Day/Day.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Day","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","icon","dateDay","Date","getDay","setState","react_default","a","createElement","className","classes","temperature","src","concat","iconUrl","alt","Component","App","getWeatherData","getCurrentWeatherData","getWeeklyWeatherData","dailyUrl","value","API_key","axios","get","then","res","weatherData","data","catch","e","console","log","weeklyUrl","weeklyWeatherData","handleChange","target","bind","assertThisInitialized","dailyData","city","humidity","clouds","_this2","fiveDayData","list","filter","d","dt_txt","split","map","index","src_Day_Day","key","Math","trunc","main","temp","weather","count","name","description","type","placeholder","onChange","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bff19dfa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Day\":\"Day_Day__3wB_h\"};","import React, { Component } from 'react';\n\nimport classes from './Day.module.scss';\n\nclass Day extends Component {\n\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdate: null,\n\t\t\ticon: null\n\t\t}\n\t}\n\n\tcomponentWillMount() {\n\t\tlet date = new Date (this.props.date);\t\n\t\tlet dateDay = date.getDay()\t\t\n\t\t\tif(dateDay === 0){\n\t\t\t\tthis.setState({date: 'Monday'})\n\t\t\t}\n\t\t\telse if(dateDay === 1){\n\t\t\t\tthis.setState({date: 'Tuesday'})\n\t\t\t}\n\t\t\telse if(dateDay === 2){\n\t\t\t\tthis.setState({date: 'Wednesday'})\n\t\t\t}\n\t\t\telse if(dateDay === 3){\n\t\t\t\tthis.setState({date: 'Thursday'})\n\t\t\t}\n\t\t\telse if(dateDay === 4){\n\t\t\t\tthis.setState({date: 'Friday'})\n\t\t\t}\n\t\t\telse if(dateDay === 5){\n\t\t\t\tthis.setState({date: 'Saturday'})\n\t\t\t}\n\t\t\telse if(dateDay === 6){\n\t\t\t\tthis.setState({date: 'Sunday'})\n\t\t\t}\n\t\t\t// console.log(this.props.iconUrl)\n\t\t\t// import('../assets/svg/' + this.props.iconUrl + '.svg').then(icon => {\n\t\t\t// \tthis.setState({icon: icon})\n\t\t\t// })\n\t\t}\t\n\n\trender() {\n\t\treturn(\n\t\t\t<div className={classes.Day}>\n\t\t\t<div>{this.props.temperature}°C</div>\n\t\t\t<div>{this.state.date}</div>\n\t\t\t<div>\n\t\t\t\t<img src={`../../assets/svg/${this.props.iconUrl}.svg`} alt={this.props.icon} />\n\t\t\t</div>\n\t\t</div>\n\t\t);\n\t}\n\n}\nexport default Day;\n","import React, { Component } from 'react';\nimport './App.scss';\n\nimport Day from './Day/Day';\n\nimport axios from 'axios';\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tAPI_key: '7c322888d234d1fc7dc225ad7e3e1e03',\n\t\t\tweatherData: null,\n\t\t\tweeklyWeatherData: null,\n\t\t\tvalue: null\n\t\t};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\n\tgetWeatherData = () => {\n\t\tthis.getCurrentWeatherData();\n\t\tthis.getWeeklyWeatherData();\n\t}\n\n\tgetCurrentWeatherData = () => {\n\t\tlet dailyUrl = `https://api.openweathermap.org/data/2.5/find?q=${this.state.value}&units=metric&appid=${this\n\t\t\t.state.API_key}`;\n\t\taxios\n\t\t\t.get(dailyUrl)\n\t\t\t.then((res) => {\n\t\t\t\tconst weatherData = res.data;\n\t\t\t\tthis.setState({ weatherData: weatherData });\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tthis.setState({ weatherData: null });\n\t\t\t\tconsole.log(e);\n\t\t\t});\n\t};\n\n\tgetWeeklyWeatherData = () => {\n\t\tlet weeklyUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${this.state\n\t\t\t.value}&units=metric&appid=${this.state.API_key}`;\n\t\taxios\n\t\t\t.get(weeklyUrl)\n\t\t\t.then((res) => {\n\t\t\t\tconst weeklyWeatherData = res.data;\n\t\t\t\tthis.setState({ weeklyWeatherData: weeklyWeatherData });\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n\t};\n\n\thandleChange = (e) => {\n\t\t// e.preventDefault();\n\t\tthis.setState({ value: e.target.value });\n\t};\n\n\n\trender() {\n\t\tlet dailyData;\n\t\tif (this.state.weeklyWeatherData) {\n\t\t\tconst fiveDayData = this.state.weeklyWeatherData.list.filter(d => d.dt_txt.split(' ')[1] === this.state.weeklyWeatherData.list[0].dt_txt.split(' ')[1])\n\t\t\tconsole.log(fiveDayData);\n\t\t\tdailyData = fiveDayData.map((data, index) =>(\n\t\t\t\t<Day \n\t\t\t\t\tdate={data.dt_txt.split(' ')[0]}\n\t\t\t\t\tkey={index}\n\t\t\t\t\ttemperature={Math.trunc(data.main.temp)}\n\t\t\t\t\ticonUrl = {data.weather[0].icon}\n\t\t\t\t/>\n\t\t\t))\n\t\t}\n\t\n\t\tlet city, temperature, humidity, clouds, iconUrl, icon;\n\t\tif (this.state.weatherData) {\n\t\t\tif (this.state.weatherData.count > 0) {\n\t\t\t\tcity = <p>{this.state.weatherData.list[0].name}</p>;\n\t\t\t\ttemperature = <p>{Math.trunc(this.state.weatherData.list[0].main.temp)}°C</p>;\n\t\t\t\thumidity = <p>{this.state.weatherData.list[0].main.humidity}%</p>;\n\t\t\t\tclouds = <p>{this.state.weatherData.list[0].weather[0].description}</p>;\n\t\t\t\ticonUrl = `http://openweathermap.org/img/wn/${this.state.weatherData.list[0].weather[0].icon}@2x.png`;\n\t\t\t\ticon = <img src={iconUrl} alt={'alt text'} />;\n\t\t\t}\n\t\t}\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<input type=\"text\" placeholder=\"Ime grada\" onChange={this.handleChange} />\n\t\t\t\t\t<button onClick={this.getWeatherData}>Search</button>\n\t\t\t\t\t<h1>{temperature}</h1>\n\t\t\t\t\t<h2>{city}</h2>\n\t\t\t\t\t{humidity}\n\t\t\t\t\t{clouds}\n\t\t\t\t\t{icon}\n\t\t\t\t\t<div className=\"Daily-Data\">\n\t\t\t\t\t\t{dailyData}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}